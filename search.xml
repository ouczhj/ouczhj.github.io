<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>霍夫曼编码</title>
      <link href="/2024/06/14/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2024/06/14/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h5 id="一、实验题目：线性表的应用"><a href="#一、实验题目：线性表的应用" class="headerlink" title="一、实验题目：线性表的应用"></a>一、实验题目：线性表的应用</h5><h5 id="二、实验目的：掌握线性表的动态分配顺序存储结构的定义和基本操作的实现。"><a href="#二、实验目的：掌握线性表的动态分配顺序存储结构的定义和基本操作的实现。" class="headerlink" title="二、实验目的：掌握线性表的动态分配顺序存储结构的定义和基本操作的实现。"></a>二、实验目的：掌握线性表的动态分配顺序存储结构的定义和基本操作的实现。</h5><h5 id="三、实验要求："><a href="#三、实验要求：" class="headerlink" title="三、实验要求："></a>三、实验要求：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">约瑟夫问题的实现：n只猴子要选猴王，所有猴子按1,2，…，n编号围坐一圈，从第1只开始按1,2，…，m报数，凡报到m号的猴子退出圈外，如此循环报数，直到圈内剩下一只猴子时，这个猴子就是猴王。编写一个程序实现上述过程，n和m由键盘输入。</span><br></pre></td></tr></table></figure><h5 id="四、实验内容"><a href="#四、实验内容" class="headerlink" title="四、实验内容"></a>四、实验内容</h5><h6 id="1-概要设计"><a href="#1-概要设计" class="headerlink" title="1.概要设计"></a>1.概要设计</h6><p>struct monkey ，定义猴子编号；</p><p>void findking(int n, int m)寻找猴王函数，传入参数为猴子数量及报数；</p><h6 id="2-详细设计"><a href="#2-详细设计" class="headerlink" title="2.详细设计"></a>2.详细设计</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct monkey</span><br><span class="line">&#123;</span><br><span class="line">int bianhao;</span><br><span class="line">monkey* next;</span><br><span class="line">&#125;;//定义猴子编号及指针域</span><br><span class="line">void findking(int n, int m)</span><br><span class="line">&#123;</span><br><span class="line">monkey* head = new monkey&#123; 1,nullptr &#125;;//初始化头节点，编号为1，指针域为nullptr</span><br><span class="line">monkey* cur = head;</span><br><span class="line">for (int i = 2; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">monkey* next1 = new monkey&#123; i,nullptr &#125;;</span><br><span class="line">cur-&gt;next = next1;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;//对n个猴子进行初始化，并通过指针进行相连</span><br><span class="line">cur-&gt;next = head;//最后一个猴子指针域指向头节点，构成一个圈</span><br><span class="line"></span><br><span class="line">//while (cur-&gt;next != head)cur = cur-&gt;next;</span><br><span class="line">cout &lt;&lt; &quot;淘汰编号：&quot;;</span><br><span class="line">while (n)//一共进行n次</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 1; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;//寻找要淘汰猴子的前一个猴子，因为是单链表，如果当前指针指向淘汰猴子，则无法将前一个猴子与后一个猴子相连</span><br><span class="line">if (n == 1)cout &lt;&lt; endl &lt;&lt; &quot;猴王编号：&quot;;//最后一个就是猴王</span><br><span class="line">cout &lt;&lt; cur-&gt;next-&gt;bianhao &lt;&lt; &quot; &quot;;//当前指针指向淘汰猴子前一个猴子，所以淘汰编号是cur-&gt;next-&gt;bianhao</span><br><span class="line">monkey* temp=cur-&gt;next;</span><br><span class="line">cur-&gt;next = temp-&gt;next;//将前一个猴子的指针域指向下一个猴子</span><br><span class="line">//cur = temp-&gt;next;</span><br><span class="line">delete temp;//删除淘汰猴子</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line">//monkey* temp = cur-&gt;next;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n, m;</span><br><span class="line">cout &lt;&lt; &quot;输入数量和报数：&quot;;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">findking(n, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-调试分析"><a href="#3-调试分析" class="headerlink" title="3.调试分析"></a>3.调试分析</h6><p><img src="C:\Users\zhj\AppData\Roaming\Typora\typora-user-images\image-20240331144126561.png" alt="image-20240331144126561"></p><h6 id="4-算法时空分析"><a href="#4-算法时空分析" class="headerlink" title="4.算法时空分析"></a>4.算法时空分析</h6><p>findking(int n, int m)的时间复杂度是O(m*n)；</p><h5 id="五、实验总结"><a href="#五、实验总结" class="headerlink" title="五、实验总结"></a>五、实验总结</h5><p>1.回顾巩固学习struct和时间复杂度计算。</p><p>2.回顾学习单链表。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迪杰斯特拉算法求最短路径</title>
      <link href="/2024/06/07/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>/2024/06/07/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h5 id="一、实验题目：校园导游咨询"><a href="#一、实验题目：校园导游咨询" class="headerlink" title="一、实验题目：校园导游咨询"></a>一、实验题目：校园导游咨询</h5><h5 id="二、实验目的：掌握图的存储方法和最短路经算法"><a href="#二、实验目的：掌握图的存储方法和最短路经算法" class="headerlink" title="二、实验目的：掌握图的存储方法和最短路经算法"></a>二、实验目的：掌握图的存储方法和最短路经算法</h5><h5 id="三、实验要求："><a href="#三、实验要求：" class="headerlink" title="三、实验要求："></a>三、实验要求：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、设计所在学校的校园平面图，所含景点不少于10个。以图中顶点表示校内各景点，存放景点名称、代号、简介等信息；以边表示路径，存放路径长度等相关信息。   </span><br><span class="line">2、为来访客人提供图中任意景点相关信息的查询。   </span><br><span class="line">3、为来访客人提供图中任意景点的纹路查询，即查询任意两个景点之间的一条最短的简单路径。</span><br></pre></td></tr></table></figure><h5 id="四、实验内容和实验步骤"><a href="#四、实验内容和实验步骤" class="headerlink" title="四、实验内容和实验步骤"></a>四、实验内容和实验步骤</h5><p>1.概要设计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct node//定义景点的结构，包含名称代号简介，还有一个复制构造函数</span><br><span class="line"></span><br><span class="line">void chaxun(string a,const vector&lt;node&gt;&amp; nodes)//通过函数名称，查询整个景点信息,时间复杂度O(nodes.size());</span><br><span class="line"></span><br><span class="line">int dijkstraShortestPath(vector&lt;vector&lt;int&gt;&gt;&amp; graph, int src, int dest, vector&lt;int&gt;&amp; parent) //迪杰斯特拉算法求两点之间的最小路径</span><br><span class="line"></span><br><span class="line">void printPath(const vector&lt;node&gt;&amp; nodes, const vector&lt;int&gt;&amp; parent, int src, int dest) </span><br><span class="line">//输出两点之间的路径,由dijkstraShortestPath（）调用</span><br><span class="line"></span><br><span class="line">main函数先创建景点信息，并添加景点之间的路径长，后通过选择进行查询景点信息还是查询两点之间的最短路径。</span><br></pre></td></tr></table></figure><p>2.主要设计</p><p>主要难点在于两点之间的距离的求解，及路径输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">int dijkstraShortestPath(vector&lt;vector&lt;int&gt;&gt;&amp; graph, int src, int dest, vector&lt;int&gt;&amp; parent) </span><br><span class="line">&#123;</span><br><span class="line">    int n = graph.size();</span><br><span class="line">    vector&lt;int&gt; dist(n, INT_MAX);//先定义图中其他点到源点的举例初始为无穷</span><br><span class="line">    dist[src] = 0;</span><br><span class="line">    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; pq;</span><br><span class="line">    //创建优先队列，实现将最小的距离放在最后面，pair的第一个参数是距离，第二个是代号</span><br><span class="line">    pq.push(make_pair(0, src));</span><br><span class="line">    while (!pq.empty()) &#123;</span><br><span class="line">        int u = pq.top().second;</span><br><span class="line">        pq.pop();</span><br><span class="line">        for (int v = 0; v &lt; n; ++v) &#123;//对所有点进行遍历</span><br><span class="line">            if (graph[u][v] &amp;&amp; dist[v] &gt; dist[u] + graph[u][v]) &#123;//判断是否是最小距离</span><br><span class="line">                dist[v] = dist[u] + graph[u][v];</span><br><span class="line">                parent[v] = u; // 记录父节点</span><br><span class="line">                pq.push(make_pair(dist[v], v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dist[dest];//返回两点之间的最小距离</span><br><span class="line">&#125;</span><br><span class="line">void printPath(const vector&lt;node&gt;&amp; nodes, const vector&lt;int&gt;&amp; parent, int src, int dest) </span><br><span class="line">&#123;</span><br><span class="line">    stack&lt;int&gt; path;</span><br><span class="line">    int current = dest;</span><br><span class="line">    while (current != src) &#123;//将路径上的点放入栈中</span><br><span class="line">        path.push(current);</span><br><span class="line">        current = parent[current];</span><br><span class="line">    &#125;</span><br><span class="line">    path.push(src);</span><br><span class="line">    cout &lt;&lt; nodes[src].name &lt;&lt; &quot; 和 &quot; &lt;&lt; nodes[dest].name &lt;&lt; &quot;之间的最短路径：&quot;;</span><br><span class="line">    while (!path.empty()) &#123;//输出路径上的点</span><br><span class="line">        int nodeIndex = path.top();</span><br><span class="line">        path.pop();</span><br><span class="line">        cout &lt;&lt; nodes[nodeIndex].name;</span><br><span class="line">        if (!path.empty()) cout &lt;&lt; &quot; -&gt; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.调试分析</p><p><img src="C:\Users\zhj\AppData\Roaming\Typora\typora-user-images\image-20240602205911069.png" alt="image-20240602205911069"></p><p><img src="C:\Users\zhj\AppData\Roaming\Typora\typora-user-images\image-20240602210049529.png" alt="image-20240602210049529"></p><p>建立上面示例网，求景点信息及两个顶点之间的距离正确。</p><h5 id="五、实验总结"><a href="#五、实验总结" class="headerlink" title="五、实验总结"></a>五、实验总结</h5><p>1.学习图的存储方式，及学会迪杰斯特拉算法求两点之间的最小距离。</p><p>2.复习回顾优先队列及栈的知识。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>霍夫曼编码</title>
      <link href="/2024/06/05/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
      <url>/2024/06/05/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h5 id="一、实验题目：Huffman树及Huffman编码的算法实现"><a href="#一、实验题目：Huffman树及Huffman编码的算法实现" class="headerlink" title="一、实验题目：Huffman树及Huffman编码的算法实现"></a>一、实验题目：Huffman树及Huffman编码的算法实现</h5><h5 id="二、实验目的："><a href="#二、实验目的：" class="headerlink" title="二、实验目的："></a>二、实验目的：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、了解该树的应用实例，熟悉掌握Huffman树的构造方法及Huffman编码的应用</span><br><span class="line">2、了解Huffman树在通信、编码领域的应用过程。</span><br></pre></td></tr></table></figure><h5 id="三、实验要求"><a href="#三、实验要求" class="headerlink" title="三、实验要求"></a>三、实验要求</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、输入一段100—200字的英文短文，存入一文件a中。</span><br><span class="line">2、写函数统计短文出现的字母个数n及每个字母的出现次数。</span><br><span class="line">3、写函数以字母出现次数作权值，建Haffman树（n个叶子），给出每个字母的Haffman编码。</span><br><span class="line">4、用每个字母编码对原短文进行编码，码文存入文件b中。</span><br><span class="line">5、用Haffman树对b中码文进行译码，结果存入文件c中，比较a,c是否一致，以检验编码、译码的正确性。</span><br></pre></td></tr></table></figure><h5 id="四、实验内容及分析"><a href="#四、实验内容及分析" class="headerlink" title="四、实验内容及分析"></a>四、实验内容及分析</h5><h6 id="1-概要各函数内容及复杂度"><a href="#1-概要各函数内容及复杂度" class="headerlink" title="1.概要各函数内容及复杂度"></a>1.概要各函数内容及复杂度</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void countzimu(const string&amp; text, map&lt;char, int&gt;&amp;mp)//对输入的字母进行统计，时间复杂度:O(text.size())</span><br><span class="line">node* hafuman(const map&lt;char, int&gt;&amp; mp)//构造哈夫曼树,时间复杂度:O(mp.size())</span><br><span class="line">void creatcode(map&lt;char, string&gt;&amp; mp, node* gen, string bm)//生成哈夫曼编码</span><br><span class="line">string txt_to_code(const map&lt;char, string&gt;&amp; bianma, string text,string&amp; txtcode)//将文本字符转换为哈夫曼编码，时间复杂度:O(text.size())</span><br><span class="line">string code_to_txt(const string&amp; code, string&amp; txt,node* gen)//将哈夫曼编码转换为字符,时间复杂度:O(code.size())</span><br><span class="line">void shuchu(const map&lt;char, int&gt;&amp;zimu,const map&lt;char, string&gt;&amp;bianma)//输出字符频次与编码,时间复杂度:O(zimu.size())</span><br></pre></td></tr></table></figure><h6 id="2-详细设计"><a href="#2-详细设计" class="headerlink" title="2.详细设计"></a>2.详细设计</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node &#123;</span><br><span class="line">    char ch;//存储字符 </span><br><span class="line">    int weight;//权值 </span><br><span class="line">    node* parent;//双亲</span><br><span class="line">    node* lchild;//左孩子</span><br><span class="line">    node* rchild;//右孩子 </span><br><span class="line">    node(char c, int f) : ch(c), weight(f), parent(nullptr), lchild(nullptr), rchild(nullptr) &#123;&#125;//初始化函数</span><br><span class="line">&#125;;</span><br><span class="line">struct cmp//用于优先队列排序</span><br><span class="line">&#123;</span><br><span class="line">    bool operator()(node* a, node* b)</span><br><span class="line">    &#123;</span><br><span class="line">        return a-&gt;weight &gt; b-&gt;weight;//用权重降序排列</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">struct cmp2//用于优先队列排序</span><br><span class="line">&#123;</span><br><span class="line">    bool operator()(node* a, node* b)</span><br><span class="line">    &#123;</span><br><span class="line">        return a-&gt;weight &lt; b-&gt;weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">void countzimu(const string&amp; text, map&lt;char, int&gt;&amp;mp)//对输入的字母进行统计</span><br><span class="line">&#123;</span><br><span class="line">    for (char zi : text)</span><br><span class="line">    &#123;</span><br><span class="line">        mp[zi]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">node* hafuman(const map&lt;char, int&gt;&amp; mp)//构造哈夫曼树</span><br><span class="line">&#123;</span><br><span class="line">    priority_queue&lt;node*, vector&lt;node*&gt;, cmp&gt;duilie;//创建优先队列</span><br><span class="line">    for (const auto&amp; zimu : mp)</span><br><span class="line">    &#123;</span><br><span class="line">        duilie.push(new node(zimu.first, zimu.second));</span><br><span class="line">    &#125;//进行降序处理</span><br><span class="line">    while (duilie.size() &gt; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        int a, b;//存储最小的两个点的权重</span><br><span class="line">        auto left = duilie.top();</span><br><span class="line">        a = left-&gt;weight;//先是左子树，后是右子树</span><br><span class="line">        duilie.pop();</span><br><span class="line">        auto right = duilie.top();</span><br><span class="line">        b = duilie.top()-&gt;weight;</span><br><span class="line">        duilie.pop();</span><br><span class="line">        int parent_weight = a + b;</span><br><span class="line">        node* parent = new node(&#x27;#&#x27;, parent_weight);//构造父节点</span><br><span class="line">        parent-&gt;lchild = left;//进行连接子节点与父节点</span><br><span class="line">        parent-&gt;rchild = right;</span><br><span class="line">        left-&gt;parent = parent;</span><br><span class="line">        right-&gt;parent = parent;</span><br><span class="line">        duilie.push(parent);//将父节点返回优先队列</span><br><span class="line">    &#125;</span><br><span class="line">    return duilie.top();//返回哈夫曼树的根节点；</span><br><span class="line">&#125;</span><br><span class="line">void creatcode(map&lt;char, string&gt;&amp; mp, node* gen, string bm)</span><br><span class="line">&#123;</span><br><span class="line">    if (!gen)return;//如果是空节点，返回</span><br><span class="line">    if (!gen-&gt;lchild &amp;&amp; !gen-&gt;rchild)//叶子，保存编码</span><br><span class="line">    &#123;</span><br><span class="line">        mp[gen-&gt;ch] = bm;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        creatcode(mp, gen-&gt;lchild, bm + &#x27;0&#x27;);//左节点+&#x27;0&#x27;</span><br><span class="line">        creatcode(mp, gen-&gt;rchild, bm + &#x27;1&#x27;);//右节点+&#x27;1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">string txt_to_code(const map&lt;char, string&gt;&amp; bianma, string text,string&amp; txtcode)//将文本字符转换为哈夫曼编码</span><br><span class="line">&#123;</span><br><span class="line">    for (char ch : text)</span><br><span class="line">    &#123;</span><br><span class="line">        txtcode += bianma.at(ch);//转换为哈夫曼编码</span><br><span class="line">    &#125;</span><br><span class="line">    return txtcode;</span><br><span class="line">&#125;</span><br><span class="line">string code_to_txt(const string&amp; code, string&amp; txt,node* gen)//将哈夫曼编码转换为字符</span><br><span class="line">&#123;</span><br><span class="line">    node* cur = gen;//开始为根节点</span><br><span class="line">    for (char ch : code)//根据编码往下走</span><br><span class="line">    &#123;</span><br><span class="line">        if (ch == &#x27;0&#x27;)cur = cur-&gt;lchild;</span><br><span class="line">        else cur = cur-&gt;rchild;</span><br><span class="line">        if (!cur-&gt;lchild &amp;&amp; !cur-&gt;rchild)//到达子节点</span><br><span class="line">        &#123;</span><br><span class="line">            txt += cur-&gt;ch;</span><br><span class="line">            cur = gen;//返回根节点，继续寻找下一个</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return txt;</span><br><span class="line">&#125;</span><br><span class="line">void shuchu(const map&lt;char, int&gt;&amp;zimu,const map&lt;char, string&gt;&amp;bianma)//输出字符频次与编码</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; &quot;一共有：&quot; &lt;&lt; zimu.size() &lt;&lt; &quot;个字符.&quot; &lt;&lt; endl&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; &quot;各字符频次与编码：&quot; &lt;&lt; endl;</span><br><span class="line">    priority_queue&lt;node*, vector&lt;node*&gt;, cmp2&gt;duilie;</span><br><span class="line">    for (const auto&amp; zimu : zimu)</span><br><span class="line">    &#123;</span><br><span class="line">        duilie.push(new node(zimu.first, zimu.second));</span><br><span class="line">    &#125;//进行降序处理</span><br><span class="line">    while (duilie.size() &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        auto it = bianma.find(duilie.top()-&gt;ch);//用于输出哈夫曼编码</span><br><span class="line">        cout &lt;&lt; duilie.top()-&gt;ch &lt;&lt; &quot;的频次：&quot; &lt;&lt; duilie.top()-&gt;weight &lt;&lt; &quot;,字符编码：&quot; &lt;&lt; it-&gt;second&lt;&lt;endl;</span><br><span class="line">        duilie.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;输入100~200英文短文：&quot; &lt;&lt; endl;</span><br><span class="line">    string text;</span><br><span class="line">    while (true)//进行输入换行处理</span><br><span class="line">    &#123;</span><br><span class="line">        string line;</span><br><span class="line">        getline(cin, line);</span><br><span class="line">        text += line + &#x27;\n&#x27;;</span><br><span class="line">        ofstream writefile(&quot;a.txt&quot;);//写入a.txt</span><br><span class="line">        writefile &lt;&lt; text;</span><br><span class="line">        writefile.close();</span><br><span class="line">        if (line.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    text.erase(text.length() - 2);//用于删除最后的换行符</span><br><span class="line">    map&lt;char, int&gt;zimu;</span><br><span class="line">    countzimu(text,zimu);//统计字符个数</span><br><span class="line">    node* gen = hafuman(zimu);//构建哈夫曼树</span><br><span class="line">    map&lt;char, string&gt;bianma;</span><br><span class="line">    creatcode(bianma, gen, &quot;&quot;);//生成字符编码</span><br><span class="line">    string txtcode = &quot;&quot;;</span><br><span class="line">    txt_to_code(bianma, text, txtcode);</span><br><span class="line">    ofstream writecode(&quot;b.txt&quot;);//哈夫曼编码写入b.txt</span><br><span class="line">    writecode &lt;&lt; txtcode;</span><br><span class="line">    writecode.close();</span><br><span class="line">    string txt = &quot;&quot;;</span><br><span class="line">    code_to_txt(txtcode, txt, gen);</span><br><span class="line">    ofstream codetotxt(&quot;c.txt&quot;);//哈夫曼编码写入b.txt</span><br><span class="line">    codetotxt &lt;&lt; txt;</span><br><span class="line">    codetotxt.close();</span><br><span class="line">    shuchu(zimu, bianma);//输出字符频次与编码</span><br><span class="line">    delete gen;//释放缓存</span><br><span class="line">    if (text == txt)cout &lt;&lt; &quot;a.txt与c.txt内容一致，编码译码正确&quot;&lt;&lt;endl;</span><br><span class="line">    else cout &lt;&lt; &quot;编码译码错误&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="五、实验测试数据"><a href="#五、实验测试数据" class="headerlink" title="五、实验测试数据"></a>五、实验测试数据</h5><p><img src="C:\Users\zhj\AppData\Roaming\Typora\typora-user-images\image-20240420110453678.png" alt="image-20240420110453678"></p><p><img src="C:\Users\zhj\AppData\Roaming\Typora\typora-user-images\image-20240420110414062.png" alt="image-20240420110414062"></p><p>文件a.txt与c.txt内容相同，编码、译码正确。</p><h5 id="六、实验总结"><a href="#六、实验总结" class="headerlink" title="六、实验总结"></a>六、实验总结</h5><p>1.学习掌握Huffman树的构造方法及Huffman编码的应用</p><p>2.在统计字母个数可以使用map&lt;char,int&gt;</p><p>3.回顾优先队列相关的使用方法</p><p>4.回顾文件相关知识</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/05/hello-world/"/>
      <url>/2024/06/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
